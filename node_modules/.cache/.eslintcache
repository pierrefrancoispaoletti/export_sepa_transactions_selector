[{"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/index.js":"1","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/App/App.js":"2","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/_config.js":"3","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/colors.js":"4","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/dummy-data/test-data.js":"5","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/Header/Header.js":"6","/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/TransactionsSelector/TransactionsSelector.js":"7"},{"size":220,"mtime":1696581101753,"results":"8","hashOfConfig":"9"},{"size":17193,"mtime":1699452062972,"results":"10","hashOfConfig":"9"},{"size":668,"mtime":1697615461454,"results":"11","hashOfConfig":"9"},{"size":1090,"mtime":1696581101751,"results":"12","hashOfConfig":"9"},{"size":2519,"mtime":1699362609691,"results":"13","hashOfConfig":"9"},{"size":643,"mtime":1696581101752,"results":"14","hashOfConfig":"9"},{"size":16406,"mtime":1699347125016,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z0wk3h",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/index.js",[],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/App/App.js",["38","39","40","41"],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/_config.js",[],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/colors.js",[],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/dummy-data/test-data.js",[],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/Header/Header.js",[],[],"/Users/pierrefrancoispaoletti/Desktop/export_sepa_transactions_selector/src/components/TransactionsSelector/TransactionsSelector.js",["42"],[],"import {\n  Alert,\n  Box,\n  Divider,\n  FormControl,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport colors from \"../../colors\";\n\nconst {\n  textColor,\n  textColorLight,\n  backgroundColor,\n  invalidFields,\n  errorTextColor,\n  validateFields,\n  borderTable,\n  warningColor,\n  warningTextColor,\n} = colors;\n\nconst TransactionsSelector = ({\n  transactions,\n  isTransactionToBeExported,\n  handleChangeDebitor,\n  selectTransaction,\n  DEBITORS_ACCOUNT,\n  selectAllTransactions,\n  isAllTransactionsSelected,\n  isGrouped,\n  transactionTotals,\n  isTransactionInvalid,\n  isValidDates,\n  debitor,\n  getTransactionsToExportTotal,\n  getTransactionsDatesByCrediteur,\n  handleChangeTransactionsToExportDateExecution,\n}) => {\n  console.log(new Date().toISOString().split(\"T\")[0]);\n  const totalTransactionsToExport = getTransactionsToExportTotal();\n  return (\n    <TableContainer sx={{ maxHeight: \"calc(100vh - 250px)\" }}>\n      <Table stickyHeader>\n        <TableHead\n          sx={{\n            position: \"sticky\",\n            top: 0,\n            boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.25)\",\n            zIndex: 10000,\n          }}\n        >\n          <TableRow>\n            <TableCell\n              align=\"center\"\n              component=\"th\"\n              scope=\"row\"\n              style={{\n                background: backgroundColor,\n                border: `4px solid ${borderTable}`,\n              }}\n            >\n              <input\n                id=\"check-select-all\"\n                type=\"checkbox\"\n                style={{ color: textColorLight }}\n                checked={isAllTransactionsSelected()}\n                onClick={(e) => selectAllTransactions(e)}\n              />\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              Document\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              Fournisseur\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              IBAN\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              Date d'exécution\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              BIC\n            </TableCell>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n              align=\"center\"\n              sx={{\n                fontWeight: \"bold\",\n                color: textColorLight,\n                background: backgroundColor,\n              }}\n            >\n              Montant\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Object.entries(\n            transactions.reduce(\n              (\n                acc,\n                {\n                  Res_Id,\n                  nomCrediteur,\n                  ibanCrediteur,\n                  bicCrediteur,\n                  ttc,\n                  debitor_id,\n                  date_execution,\n                  description,\n                }\n              ) => {\n                if (!acc[nomCrediteur]) {\n                  acc[nomCrediteur] = [];\n                }\n                acc[nomCrediteur].push({\n                  Res_Id,\n                  nomCrediteur,\n                  ibanCrediteur,\n                  bicCrediteur,\n                  ttc,\n                  debitor_id,\n                  date_execution,\n                  description,\n                });\n                return acc;\n              },\n              {}\n            )\n          ).map(([nomCrediteur, transactions, ttc, Res_Id, description]) => {\n            return (\n              <Fragment key={nomCrediteur}>\n                <TableRow key={nomCrediteur}>\n                  <TableCell\n                    colSpan={7}\n                    align=\"left\"\n                    sx={{\n                      margin: \"34px 0\",\n                      border: `4px solid ${borderTable}`,\n                    }}\n                  >\n                    <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                      <Typography\n                        component=\"span\"\n                        sx={{\n                          display: \"inline-block\",\n                          padding: \"10px\",\n                          border: `2px solid ${borderTable}`,\n                        }}\n                      >\n                        <strong>Pour le fournisseur : </strong>\n                        {nomCrediteur}\n                      </Typography>\n                      {isGrouped &&\n                        (getTransactionsDatesByCrediteur()?.[nomCrediteur]\n                          ?.length > 1 ||\n                          isTransactionInvalid(nomCrediteur)) && (\n                          <Stack justifyContent=\"center\" alignItems=\"center\">\n                            <Alert\n                              severity=\"warning\"\n                              sx={{\n                                marginBottom: \"6px\",\n                                background: warningColor,\n                                color: warningTextColor,\n                              }}\n                              variant=\"filled\"\n                            >\n                              Attention : Les dates d'exécution ne sont pas\n                              équivalentes ou la date d'execution est\n                              postérieure à la date du jour. Pour générer un\n                              export groupé, veuillez sélectionner une date\n                              d'exécution unique qui sera appliquée lors de\n                              l'export.\n                            </Alert>\n                            <Box>\n                              <FormControl>\n                                <TextField\n                                  type=\"date\"\n                                  fullWidth={false}\n                                  onChange={handleChangeTransactionsToExportDateExecution(\n                                    nomCrediteur\n                                  )}\n                                  inputProps={{\n                                    min: new Date().toISOString().split(\"T\")[0],\n                                  }}\n                                />\n                              </FormControl>\n                            </Box>\n                          </Stack>\n                        )}\n                    </Stack>\n                    <FormControl\n                      sx={{ margin: \"34px 0\" }}\n                      fullWidth\n                      required={totalTransactionsToExport[nomCrediteur] > 0}\n                      disabled={\n                        totalTransactionsToExport[nomCrediteur] === undefined ||\n                        (isGrouped &&\n                          getTransactionsDatesByCrediteur()?.[nomCrediteur]\n                            ?.length > 1)\n                      }\n                    >\n                      <label style={{ color: textColor }}>Débiteur</label>\n                      <select\n                        style={{\n                          fontSize: \"1.2rem\",\n                          color: \"#3A96DA\",\n                          fontWeight: \"bold\",\n                        }}\n                        value={\n                          debitor.find((d) => d.nomCrediteur === nomCrediteur)\n                            ?.debitor_id || \"\"\n                        }\n                        onChange={handleChangeDebitor(\n                          transactions,\n                          nomCrediteur\n                        )}\n                      >\n                        <option key=\"\" value=\"\">\n                          Veuillez choisir un debiteur\n                        </option>\n                        {DEBITORS_ACCOUNT.map(\n                          ({ id, nom_debiteur, iban, bic, format }) => (\n                            <option key={id} value={id}>\n                              {`${nom_debiteur} - ${iban} - ${bic} - ${format}`}\n                            </option>\n                          )\n                        )}\n                      </select>\n                    </FormControl>\n                  </TableCell>\n                </TableRow>\n                {transactions.map(\n                  ({\n                    Res_Id,\n                    nomCrediteur,\n                    ibanCrediteur,\n                    bicCrediteur,\n                    ttc,\n                    date_execution,\n                    description,\n                  }) => (\n                    <Tooltip\n                      key={Res_Id}\n                      arrow\n                      title={\n                        isTransactionInvalid(nomCrediteur, ttc) &&\n                        getTransactionsDatesByCrediteur()?.[nomCrediteur]\n                          ?.length === 1\n                          ? `Cette transaction à un montant négatif (${Number(\n                              ttc\n                            ).toFixed(\n                              2\n                            )}) et ne peut pas être inclue dans le fichier d'export`\n                          : (isGrouped &&\n                              getTransactionsDatesByCrediteur()?.[nomCrediteur]\n                                ?.length > 1) ||\n                            !isValidDates(date_execution)\n                          ? `Les transactions selectionées ont une date d'echeance differente ou antérieure à la date du jour`\n                          : `Total transactions : ${\n                              isGrouped\n                                ? Number(\n                                    transactionTotals[nomCrediteur]\n                                  ).toFixed(2)\n                                : Number(ttc).toFixed(2)\n                            } pour ${nomCrediteur}`\n                      }\n                    >\n                      <TableRow\n                        key={Res_Id}\n                        style={\n                          isTransactionInvalid(nomCrediteur, ttc) ||\n                          !isValidDates(date_execution)\n                            ? {\n                                background: invalidFields,\n                                color: errorTextColor,\n                              }\n                            : { background: validateFields }\n                        }\n                      >\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          <input\n                            type=\"checkbox\"\n                            style={{ color: backgroundColor }}\n                            checked={\n                              isTransactionToBeExported(Res_Id) &&\n                              isTransactionInvalid(nomCrediteur, ttc) ===\n                                false &&\n                              isValidDates(date_execution)\n                            }\n                            disabled={\n                              isTransactionInvalid(nomCrediteur, ttc) ||\n                              !isValidDates(date_execution)\n                            }\n                            onClick={selectTransaction(Res_Id)}\n                          />\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          {Res_Id}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          {nomCrediteur}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          {ibanCrediteur}\n                        </TableCell>\n                        {isValidDates(date_execution) ? (\n                          <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                            {date_execution}\n                          </TableCell>\n                        ) : (\n                          <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                            <FormControl>\n                              <input\n                                type=\"date\"\n                                format=\"dd/MM/yyyy\"\n                                style={{ background: \"white\" }}\n                                min={new Date().toISOString().split(\"T\")[0]}\n                                value={\n                                  new Date(\n                                    date_execution\n                                      .split(\"/\")\n                                      .reverse()\n                                      .join(\"-\")\n                                  )\n                                    .toISOString()\n                                    .split(\"T\")[0]\n                                }\n                                onChange={handleChangeTransactionsToExportDateExecution(\n                                  nomCrediteur,\n                                  description\n                                )}\n                              />\n                            </FormControl>\n                          </TableCell>\n                        )}\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          {bicCrediteur}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                          {new Intl.NumberFormat(\"fr-FR\", {\n                            minimumFractionDigits: 2,\n                          }).format(Number(ttc.toFixed(2)))}\n                        </TableCell>\n                      </TableRow>\n                    </Tooltip>\n                  )\n                )}\n                {totalTransactionsToExport[nomCrediteur] > 0 && (\n                  <TableRow>\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell sx={{ border: \"none\" }} />\n                    <TableCell\n                      colSpan={1}\n                      align=\"right\"\n                      sx={{\n                        border: `2px solid ${borderTable}`,\n                      }}\n                    >\n                      <Typography sx={{ fontWeight: \"bold\" }}>\n                        TOTAL {nomCrediteur} :{\" \"}\n                        {new Intl.NumberFormat(\"fr-FR\", {\n                          style: \"currency\",\n                          currency: \"EUR\",\n                        }).format(\n                          Number(\n                            totalTransactionsToExport[nomCrediteur].toFixed(2)\n                          )\n                        )}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n                <div style={{ marginBottom: \"8px\" }} />\n              </Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TransactionsSelector;\n",{"ruleId":"43","severity":1,"message":"44","line":30,"column":3,"nodeType":"45","messageId":"46","endLine":30,"endColumn":18},{"ruleId":"47","severity":1,"message":"48","line":365,"column":51,"nodeType":"49","messageId":"50","endLine":365,"endColumn":53},{"ruleId":"51","severity":1,"message":"52","line":382,"column":6,"nodeType":"53","endLine":382,"endColumn":8,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":405,"column":6,"nodeType":"53","endLine":405,"endColumn":31,"suggestions":"56"},{"ruleId":"43","severity":1,"message":"57","line":4,"column":3,"nodeType":"45","messageId":"46","endLine":4,"endColumn":10},"no-unused-vars","'backgroundColor' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.","ArrayExpression",["58"],"React Hook useEffect has missing dependencies: 'isTransactionInvalid' and 'transactionsToExport'. Either include them or remove the dependency array.",["59"],"'Divider' is defined but never used.",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [transactions]",{"range":"64","text":"65"},"Update the dependencies array to be: [isGrouped, isTransactionInvalid, transactions, transactionsToExport]",{"range":"66","text":"67"},[11646,11648],"[transactions]",[12379,12404],"[isGrouped, isTransactionInvalid, transactions, transactionsToExport]"]