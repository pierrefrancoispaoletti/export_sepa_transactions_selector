{"ast":null,"code":"var _jsxFileName = \"/Users/pierrefrancoispaoletti/Desktop/EXPORT_SEPA/transactions-selector/src/components/App/App.js\",\n  _window$comptesDebite,\n  _window$documents,\n  _ref,\n  _window$messagesErreu,\n  _s = $RefreshSig$();\nimport { Alert, Box, Container, FormControlLabel, Snackbar, Stack, Switch } from \"@mui/material\";\nimport Header from \"../Header/Header\";\nimport { accountDebitors, documents, messagesErreur } from \"../../dummy-data/test-data\";\nimport TransactionsSelector from \"../TransactionsSelector/TransactionsSelector\";\nimport { useEffect, useState } from \"react\";\nimport axios, { all } from \"axios\";\nimport URL_GENERATION from \"../../_config\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport colors from \"../../colors\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ACCOUNT_DEBITORS = (_window$comptesDebite = window.comptesDebiteurs) !== null && _window$comptesDebite !== void 0 ? _window$comptesDebite : accountDebitors;\nconst DOCUMENTS = (_window$documents = window.documents) !== null && _window$documents !== void 0 ? _window$documents : documents;\nconst MESSAGES_ERREURS = (_ref = (_window$messagesErreu = window.messagesErreurs) !== null && _window$messagesErreu !== void 0 ? _window$messagesErreu : messagesErreur) !== null && _ref !== void 0 ? _ref : [];\nconst {\n  textColorLight,\n  backgroundColor,\n  actionColor\n} = colors;\nconst App = () => {\n  _s();\n  const [transactions, setTransactions] = useState([...DOCUMENTS]);\n  const [transactionsToExport, setTransactionsToExport] = useState([]);\n  const [isGrouped, setIsGrouped] = useState(localStorage.getItem(\"isGrouped\") === \"true\");\n  const [loading, setLoading] = useState(false);\n  const [transactionTotals, setTransactionTotals] = useState({});\n  const [debitor, setDebitor] = useState([]);\n  const [erreurs, setErreurs] = useState(MESSAGES_ERREURS);\n  const [message, setMessage] = useState(null);\n  const [hideErrors, setHideErrors] = useState(true);\n  useEffect(() => {\n    let prefs = localStorage.getItem(\"debitors\");\n    const favouriteDebitor = ACCOUNT_DEBITORS.find(debitor => debitor.favourite === \"1\");\n    if (favouriteDebitor && !prefs) {\n      setMessage({\n        status: \"success\",\n        message: \"Compte favori chargé pour tous les fournisseurs\"\n      });\n      const map1 = new Map();\n      const allCrediteurs = new Set(transactions.map(debitor => debitor.nomCrediteur));\n      for (const key of allCrediteurs) {\n        map1.set(key, favouriteDebitor.id);\n      }\n      let infosA = Array.from(map1.entries());\n      let newInfosA = infosA.map(_ref2 => {\n        let [nomCrediteur, debitor_id] = _ref2;\n        return {\n          debitor_id,\n          nomCrediteur\n        };\n      });\n      setDebitor(newInfosA);\n      setTransactions(transactions => transactions.map(transaction => ({\n        ...transaction,\n        debitor_id: favouriteDebitor.id\n      })));\n      setTransactionsToExport(transactionsToExport => transactionsToExport.map(transaction => ({\n        ...transaction,\n        debitor_id: favouriteDebitor.id\n      })));\n    }\n    if (prefs) {\n      setMessage({\n        status: \"success\",\n        message: \"Comptes personalisés chargé pour les fournisseurs\"\n      });\n      const infosB = Object.entries(JSON.parse(prefs));\n      let newInfos = infosB.map(_ref3 => {\n        let [nomCrediteur, debitor_id] = _ref3;\n        return {\n          debitor_id,\n          nomCrediteur\n        };\n      });\n      setDebitor(newInfos);\n      newInfos.map(_ref4 => {\n        let {\n          debitor_id,\n          nomCrediteur\n        } = _ref4;\n        setTransactions(transactions => transactions.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n          ...transaction,\n          debitor_id\n        } : transaction));\n        setTransactionsToExport(transactionsToExport => transactionsToExport.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n          ...transaction,\n          debitor_id\n        } : transaction));\n      });\n    }\n  }, []);\n  useEffect(() => {\n    setTransactionTotals(isTransactionOK(transactions));\n  }, [transactions]);\n  useEffect(() => {\n    // Vérifier si des transactions non valides sont sélectionnées\n    const invalidTransactions = transactionsToExport.filter(_ref5 => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref5;\n      return isTransactionInvalid(nomCrediteur, ttc);\n    });\n    if (invalidTransactions.length > 0) {\n      // Filtrer les transactions non valides et mettre à jour transactionsToExport\n      const validTransactions = transactionsToExport.filter(_ref6 => {\n        let {\n          nomCrediteur,\n          ttc\n        } = _ref6;\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    }\n  }, [isGrouped, transactions]);\n  const getTransactionsToExportTotal = () => {\n    return transactionsToExport.reduce((acc, _ref7) => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref7;\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n  };\n  useEffect(() => {\n    localStorage.setItem(\"isGrouped\", isGrouped);\n  }, [isGrouped]);\n  const isTransactionOK = transactions => {\n    const totalTransactionsByNomCrediteur = transactions.reduce((acc, _ref8) => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref8;\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n    return totalTransactionsByNomCrediteur;\n  };\n  const getTransactionsDatesByCrediteur = () => {\n    // Initialisation d'un objet vide pour stocker les résultats\n    const result = {};\n\n    // Parcours de chaque transaction dans le tableau transactionsToExport\n    transactionsToExport.forEach(_ref9 => {\n      let {\n        nomCrediteur,\n        date_execution\n      } = _ref9;\n      // Vérification si le créancier existe déjà dans le résultat\n      if (!result.hasOwnProperty(nomCrediteur)) {\n        // Si le créancier n'existe pas, on l'ajoute avec un tableau vide pour les dates\n        result[nomCrediteur] = [];\n      }\n\n      // Vérification si la date_execution existe déjà dans le tableau de dates pour le créancier\n      if (!result[nomCrediteur].includes(date_execution)) {\n        // Si la date_execution n'existe pas, on l'ajoute au tableau de dates pour le créancier\n        result[nomCrediteur].push(date_execution);\n      }\n    });\n\n    // Retourne l'objet contenant le nombre de dates associées à chaque créancier\n    return result;\n  };\n  const handleChangeTransactionsToExportDateExecution = nomCrediteur => e => {\n    const {\n      value\n    } = e.target;\n    setTransactionsToExport(transactionsToExport => {\n      return transactionsToExport.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n        ...transaction,\n        date_execution: value\n      } : transaction);\n    });\n    setTransactions(transactions => {\n      return transactions.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n        ...transaction,\n        date_execution: value\n      } : transaction);\n    });\n  };\n  const isTransactionInvalid = (nomCrediteur, ttc) => {\n    var _getTransactionsDates, _getTransactionsDates2;\n    return isGrouped && transactionTotals[nomCrediteur] < 0 || !isGrouped && Number(ttc) < 0 || isGrouped && ((_getTransactionsDates = getTransactionsDatesByCrediteur()) === null || _getTransactionsDates === void 0 ? void 0 : (_getTransactionsDates2 = _getTransactionsDates[nomCrediteur]) === null || _getTransactionsDates2 === void 0 ? void 0 : _getTransactionsDates2.length) > 1;\n  };\n  const isTransactionToBeExported = Res_id => {\n    return transactionsToExport.some(transaction => transaction.Res_Id === Res_id);\n  };\n  const isAllTransactionsSelected = () => {\n    return transactionsToExport.length === transactions.length;\n  };\n  const selectTransaction = Res_Id => e => {\n    const {\n      checked\n    } = e.target;\n    if (checked) {\n      setTransactionsToExport(transactionsToExport => [...transactionsToExport, transactions.find(transaction => transaction.Res_Id === Res_Id)]);\n    } else {\n      setTransactionsToExport(transactionsToExport => transactionsToExport.filter(transaction => transaction.Res_Id !== Res_Id));\n    }\n  };\n  const selectAllTransactions = e => {\n    const {\n      checked\n    } = e.target;\n    if (checked) {\n      const validTransactions = transactions.filter(_ref10 => {\n        let {\n          nomCrediteur,\n          ttc\n        } = _ref10;\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    } else {\n      setTransactionsToExport([]);\n    }\n  };\n  const setGrouped = () => {\n    setIsGrouped(!isGrouped);\n  };\n  const handleChangeDebitor = (transactions, nomCrediteur) => e => {\n    const {\n      value\n    } = e.target;\n    setDebitor(debitor => {\n      const updatedDebitor = debitor.map(deb => deb.nomCrediteur === nomCrediteur ? {\n        ...deb,\n        debitor_id: value\n      } : deb);\n      const existingDebitor = updatedDebitor.find(deb => deb.nomCrediteur === nomCrediteur);\n      return existingDebitor ? updatedDebitor : [...updatedDebitor, {\n        nomCrediteur,\n        debitor_id: value\n      }];\n    });\n    setTransactions(transactions => transactions.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n      ...transaction,\n      debitor_id: value\n    } : transaction));\n    setTransactionsToExport(transactionsToExport => transactionsToExport.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n      ...transaction,\n      debitor_id: value\n    } : transaction));\n    const storedDebitors = localStorage.getItem(\"debitors\");\n    const debitorData = storedDebitors ? JSON.parse(storedDebitors) : {};\n    debitorData[nomCrediteur] = value;\n    localStorage.setItem(\"debitors\", JSON.stringify(debitorData));\n  };\n  const handleGenerateXML = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"transactions\", JSON.stringify(transactionsToExport));\n    formData.append(\"isGrouped\", isGrouped);\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_GENERATION,\n        data: formData,\n        responseType: \"blob\"\n      });\n      if (response.data.status && response.data.status === \"error\") {\n        alert(response.data.message);\n      } else {\n        let blob = null;\n        if (response.headers[\"content-type\"] === \"application/xml\") {\n          blob = new Blob([response.data], {\n            type: \"application/xml\"\n          });\n        } else {\n          blob = new Blob([response.data], {\n            type: \"application/zip\"\n          });\n        }\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        const contentDisposition = response.headers[\"content-disposition\"];\n        if (contentDisposition.length > 0) {\n          const filename = contentDisposition === null || contentDisposition === void 0 ? void 0 : contentDisposition.split(\"filename=\")[1];\n          link.href = url;\n          link.setAttribute(\"download\", filename);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      }\n    } catch (error) {\n      alert(\"Il y à eu une erreur lors de la génération du xml\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: \"1vh\"\n    },\n    children: [message && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: message !== null,\n      autoHideDuration: 5000,\n      onClose: () => setMessage(null),\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: message.status,\n        onClose: () => setMessage(null),\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [erreurs.length > 0 && !hideErrors && erreurs.map((erreur, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setErreurs(erreurs => erreurs.filter((_, i) => i !== index)),\n        sx: {\n          margin: \"6px\",\n          fontWeight: \"bold\"\n        },\n        severity: \"error\",\n        children: erreur\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        sx: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"top\",\n          sx: {\n            color: backgroundColor,\n            textTransform: \"uppercase\",\n            display: \"flex\",\n            padding: \"10px\",\n            margin: \"10px\"\n          },\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: isGrouped,\n            onChange: () => setGrouped()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this),\n          label: \"Regrouper les transactions\",\n          labelPlacement: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), erreurs.length > 0 && /*#__PURE__*/_jsxDEV(Stack, {\n          children: [hideErrors && /*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"filled\",\n            severity: \"warning\",\n            children: [\"Il y a \", erreurs.length, \" documents en erreur dans l'export\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"top\",\n            sx: {\n              color: backgroundColor,\n              textTransform: \"uppercase\",\n              display: \"flex\",\n              padding: \"10px\",\n              margin: \"10px\"\n            },\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: hideErrors,\n              onChange: () => setHideErrors(!hideErrors)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 19\n            }, this),\n            label: \"Masquer les erreurs\",\n            labelPlacement: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleGenerateXML,\n        children: [/*#__PURE__*/_jsxDEV(TransactionsSelector, {\n          transactions: transactions,\n          isTransactionToBeExported: isTransactionToBeExported,\n          handleChangeDebitor: handleChangeDebitor,\n          selectTransaction: selectTransaction,\n          DEBITORS_ACCOUNT: ACCOUNT_DEBITORS,\n          selectAllTransactions: selectAllTransactions,\n          isAllTransactionsSelected: isAllTransactionsSelected,\n          isGrouped: isGrouped,\n          transactionTotals: transactionTotals,\n          isTransactionInvalid: isTransactionInvalid,\n          debitor: debitor,\n          getTransactionsToExportTotal: getTransactionsToExportTotal,\n          getTransactionsDatesByCrediteur: getTransactionsDatesByCrediteur\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n            paddingTop: \"40px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n            disabled: transactionsToExport.length === 0 || loading,\n            sx: {\n              background: actionColor,\n              color: textColorLight,\n              textTransform: \"uppercase\",\n              fontWeight: \"bold\"\n            },\n            variant: \"contained\",\n            type: \"submit\",\n            loading: loading,\n            children: !loading ? \"Générer l'export SEPA\" : \"XML en cours de création\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1xEZlOCzwl4CHD4AertSVxghB9c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alert","Box","Container","FormControlLabel","Snackbar","Stack","Switch","Header","accountDebitors","documents","messagesErreur","TransactionsSelector","useEffect","useState","axios","all","URL_GENERATION","LoadingButton","colors","jsxDEV","_jsxDEV","ACCOUNT_DEBITORS","_window$comptesDebite","window","comptesDebiteurs","DOCUMENTS","_window$documents","MESSAGES_ERREURS","_ref","_window$messagesErreu","messagesErreurs","textColorLight","backgroundColor","actionColor","App","_s","transactions","setTransactions","transactionsToExport","setTransactionsToExport","isGrouped","setIsGrouped","localStorage","getItem","loading","setLoading","transactionTotals","setTransactionTotals","debitor","setDebitor","erreurs","setErreurs","message","setMessage","hideErrors","setHideErrors","prefs","favouriteDebitor","find","favourite","status","map1","Map","allCrediteurs","Set","map","nomCrediteur","key","set","id","infosA","Array","from","entries","newInfosA","_ref2","debitor_id","transaction","infosB","Object","JSON","parse","newInfos","_ref3","_ref4","isTransactionOK","invalidTransactions","filter","_ref5","ttc","isTransactionInvalid","length","validTransactions","_ref6","getTransactionsToExportTotal","reduce","acc","_ref7","Number","setItem","totalTransactionsByNomCrediteur","_ref8","getTransactionsDatesByCrediteur","result","forEach","_ref9","date_execution","hasOwnProperty","includes","push","handleChangeTransactionsToExportDateExecution","e","value","target","_getTransactionsDates","_getTransactionsDates2","isTransactionToBeExported","Res_id","some","Res_Id","isAllTransactionsSelected","selectTransaction","checked","selectAllTransactions","_ref10","setGrouped","handleChangeDebitor","updatedDebitor","deb","existingDebitor","storedDebitors","debitorData","stringify","handleGenerateXML","preventDefault","formData","FormData","append","response","method","url","data","responseType","alert","blob","headers","Blob","type","URL","createObjectURL","link","document","createElement","contentDisposition","filename","split","href","setAttribute","body","appendChild","click","removeChild","error","className","style","height","children","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","fileName","_jsxFileName","lineNumber","columnNumber","erreur","index","_","i","sx","margin","fontWeight","display","justifyContent","width","color","textTransform","padding","control","onChange","label","labelPlacement","variant","onSubmit","DEBITORS_ACCOUNT","alignItems","flexDirection","paddingTop","disabled","background","_c","$RefreshReg$"],"sources":["/Users/pierrefrancoispaoletti/Desktop/EXPORT_SEPA/transactions-selector/src/components/App/App.js"],"sourcesContent":["import {\n  Alert,\n  Box,\n  Container,\n  FormControlLabel,\n  Snackbar,\n  Stack,\n  Switch,\n} from \"@mui/material\";\nimport Header from \"../Header/Header\";\nimport {\n  accountDebitors,\n  documents,\n  messagesErreur,\n} from \"../../dummy-data/test-data\";\nimport TransactionsSelector from \"../TransactionsSelector/TransactionsSelector\";\nimport { useEffect, useState } from \"react\";\nimport axios, { all } from \"axios\";\nimport URL_GENERATION from \"../../_config\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport colors from \"../../colors\";\nimport \"./App.css\";\n\nconst ACCOUNT_DEBITORS = window.comptesDebiteurs ?? accountDebitors;\nconst DOCUMENTS = window.documents ?? documents;\nconst MESSAGES_ERREURS = window.messagesErreurs ?? messagesErreur ?? [];\n\nconst { textColorLight, backgroundColor, actionColor } = colors;\n\nconst App = () => {\n  const [transactions, setTransactions] = useState([...DOCUMENTS]);\n  const [transactionsToExport, setTransactionsToExport] = useState([]);\n  const [isGrouped, setIsGrouped] = useState(\n    localStorage.getItem(\"isGrouped\") === \"true\"\n  );\n  const [loading, setLoading] = useState(false);\n  const [transactionTotals, setTransactionTotals] = useState({});\n  const [debitor, setDebitor] = useState([]);\n\n  const [erreurs, setErreurs] = useState(MESSAGES_ERREURS);\n\n  const [message, setMessage] = useState(null);\n\n  const [hideErrors, setHideErrors] = useState(true);\n\n  useEffect(() => {\n    let prefs = localStorage.getItem(\"debitors\");\n\n    const favouriteDebitor = ACCOUNT_DEBITORS.find(\n      (debitor) => debitor.favourite === \"1\"\n    );\n\n    if (favouriteDebitor && !prefs) {\n      setMessage({\n        status: \"success\",\n        message: \"Compte favori chargé pour tous les fournisseurs\",\n      });\n      const map1 = new Map();\n      const allCrediteurs = new Set(\n        transactions.map((debitor) => debitor.nomCrediteur)\n      );\n      for (const key of allCrediteurs) {\n        map1.set(key, favouriteDebitor.id);\n      }\n      let infosA = Array.from(map1.entries());\n\n      let newInfosA = infosA.map(([nomCrediteur, debitor_id]) => ({\n        debitor_id,\n        nomCrediteur,\n      }));\n\n      setDebitor(newInfosA);\n\n      setTransactions((transactions) =>\n        transactions.map((transaction) => ({\n          ...transaction,\n          debitor_id: favouriteDebitor.id,\n        }))\n      );\n      setTransactionsToExport((transactionsToExport) =>\n        transactionsToExport.map((transaction) => ({\n          ...transaction,\n          debitor_id: favouriteDebitor.id,\n        }))\n      );\n    }\n\n    if (prefs) {\n      setMessage({\n        status: \"success\",\n        message: \"Comptes personalisés chargé pour les fournisseurs\",\n      });\n      const infosB = Object.entries(JSON.parse(prefs));\n      let newInfos = infosB.map(([nomCrediteur, debitor_id]) => ({\n        debitor_id,\n        nomCrediteur,\n      }));\n\n      setDebitor(newInfos);\n\n      newInfos.map(({ debitor_id, nomCrediteur }) => {\n        setTransactions((transactions) =>\n          transactions.map((transaction) =>\n            transaction.nomCrediteur === nomCrediteur\n              ? { ...transaction, debitor_id }\n              : transaction\n          )\n        );\n        setTransactionsToExport((transactionsToExport) =>\n          transactionsToExport.map((transaction) =>\n            transaction.nomCrediteur === nomCrediteur\n              ? { ...transaction, debitor_id }\n              : transaction\n          )\n        );\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    setTransactionTotals(isTransactionOK(transactions));\n  }, [transactions]);\n\n  useEffect(() => {\n    // Vérifier si des transactions non valides sont sélectionnées\n    const invalidTransactions = transactionsToExport.filter(\n      ({ nomCrediteur, ttc }) => {\n        return isTransactionInvalid(nomCrediteur, ttc);\n      }\n    );\n\n    if (invalidTransactions.length > 0) {\n      // Filtrer les transactions non valides et mettre à jour transactionsToExport\n      const validTransactions = transactionsToExport.filter(\n        ({ nomCrediteur, ttc }) => {\n          return isTransactionInvalid(nomCrediteur, ttc) === false;\n        }\n      );\n      setTransactionsToExport(validTransactions);\n    }\n  }, [isGrouped, transactions]);\n\n  const getTransactionsToExportTotal = () => {\n    return transactionsToExport.reduce((acc, { nomCrediteur, ttc }) => {\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"isGrouped\", isGrouped);\n  }, [isGrouped]);\n\n  const isTransactionOK = (transactions) => {\n    const totalTransactionsByNomCrediteur = transactions.reduce(\n      (acc, { nomCrediteur, ttc }) => {\n        acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n        return acc;\n      },\n      {}\n    );\n    return totalTransactionsByNomCrediteur;\n  };\n\n  const getTransactionsDatesByCrediteur = () => {\n    // Initialisation d'un objet vide pour stocker les résultats\n    const result = {};\n\n    // Parcours de chaque transaction dans le tableau transactionsToExport\n    transactionsToExport.forEach(({ nomCrediteur, date_execution }) => {\n      // Vérification si le créancier existe déjà dans le résultat\n      if (!result.hasOwnProperty(nomCrediteur)) {\n        // Si le créancier n'existe pas, on l'ajoute avec un tableau vide pour les dates\n        result[nomCrediteur] = [];\n      }\n\n      // Vérification si la date_execution existe déjà dans le tableau de dates pour le créancier\n      if (!result[nomCrediteur].includes(date_execution)) {\n        // Si la date_execution n'existe pas, on l'ajoute au tableau de dates pour le créancier\n        result[nomCrediteur].push(date_execution);\n      }\n    });\n\n    // Retourne l'objet contenant le nombre de dates associées à chaque créancier\n    return result;\n  };\n\n  const handleChangeTransactionsToExportDateExecution =\n    (nomCrediteur) => (e) => {\n      const { value } = e.target;\n      setTransactionsToExport((transactionsToExport) => {\n        return transactionsToExport.map((transaction) =>\n          transaction.nomCrediteur === nomCrediteur\n            ? { ...transaction, date_execution: value }\n            : transaction\n        );\n      });\n      setTransactions((transactions) => {\n        return transactions.map((transaction) =>\n          transaction.nomCrediteur === nomCrediteur\n            ? { ...transaction, date_execution: value }\n            : transaction\n        );\n      });\n    };\n\n  const isTransactionInvalid = (nomCrediteur, ttc) => {\n    return (\n      (isGrouped && transactionTotals[nomCrediteur] < 0) ||\n      (!isGrouped && Number(ttc) < 0) ||\n      (isGrouped &&\n        getTransactionsDatesByCrediteur()?.[nomCrediteur]?.length > 1)\n    );\n  };\n\n  const isTransactionToBeExported = (Res_id) => {\n    return transactionsToExport.some(\n      (transaction) => transaction.Res_Id === Res_id\n    );\n  };\n\n  const isAllTransactionsSelected = () => {\n    return transactionsToExport.length === transactions.length;\n  };\n\n  const selectTransaction = (Res_Id) => (e) => {\n    const { checked } = e.target;\n    if (checked) {\n      setTransactionsToExport((transactionsToExport) => [\n        ...transactionsToExport,\n        transactions.find((transaction) => transaction.Res_Id === Res_Id),\n      ]);\n    } else {\n      setTransactionsToExport((transactionsToExport) =>\n        transactionsToExport.filter(\n          (transaction) => transaction.Res_Id !== Res_Id\n        )\n      );\n    }\n  };\n\n  const selectAllTransactions = (e) => {\n    const { checked } = e.target;\n    if (checked) {\n      const validTransactions = transactions.filter(({ nomCrediteur, ttc }) => {\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    } else {\n      setTransactionsToExport([]);\n    }\n  };\n\n  const setGrouped = () => {\n    setIsGrouped(!isGrouped);\n  };\n\n  const handleChangeDebitor = (transactions, nomCrediteur) => (e) => {\n    const { value } = e.target;\n\n    setDebitor((debitor) => {\n      const updatedDebitor = debitor.map((deb) =>\n        deb.nomCrediteur === nomCrediteur ? { ...deb, debitor_id: value } : deb\n      );\n      const existingDebitor = updatedDebitor.find(\n        (deb) => deb.nomCrediteur === nomCrediteur\n      );\n\n      return existingDebitor\n        ? updatedDebitor\n        : [...updatedDebitor, { nomCrediteur, debitor_id: value }];\n    });\n\n    setTransactions((transactions) =>\n      transactions.map((transaction) =>\n        transaction.nomCrediteur === nomCrediteur\n          ? { ...transaction, debitor_id: value }\n          : transaction\n      )\n    );\n    setTransactionsToExport((transactionsToExport) =>\n      transactionsToExport.map((transaction) =>\n        transaction.nomCrediteur === nomCrediteur\n          ? { ...transaction, debitor_id: value }\n          : transaction\n      )\n    );\n\n    const storedDebitors = localStorage.getItem(\"debitors\");\n    const debitorData = storedDebitors ? JSON.parse(storedDebitors) : {};\n    debitorData[nomCrediteur] = value;\n    localStorage.setItem(\"debitors\", JSON.stringify(debitorData));\n  };\n\n  const handleGenerateXML = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"transactions\", JSON.stringify(transactionsToExport));\n    formData.append(\"isGrouped\", isGrouped);\n\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_GENERATION,\n        data: formData,\n        responseType: \"blob\",\n      });\n\n      if (response.data.status && response.data.status === \"error\") {\n        alert(response.data.message);\n      } else {\n        let blob = null;\n\n        if (response.headers[\"content-type\"] === \"application/xml\") {\n          blob = new Blob([response.data], {\n            type: \"application/xml\",\n          });\n        } else {\n          blob = new Blob([response.data], {\n            type: \"application/zip\",\n          });\n        }\n\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        const contentDisposition = response.headers[\"content-disposition\"];\n        if (contentDisposition.length > 0) {\n          const filename = contentDisposition?.split(\"filename=\")[1];\n          link.href = url;\n          link.setAttribute(\"download\", filename);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      }\n    } catch (error) {\n      alert(\"Il y à eu une erreur lors de la génération du xml\");\n    }\n    setLoading(false);\n  };\n  return (\n    <div className=\"App\" style={{ height: \"1vh\" }}>\n      {message && (\n        <Snackbar\n          open={message !== null}\n          autoHideDuration={5000}\n          onClose={() => setMessage(null)}\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        >\n          <Alert severity={message.status} onClose={() => setMessage(null)}>\n            {message.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Container>\n        {erreurs.length > 0 &&\n          !hideErrors &&\n          erreurs.map((erreur, index) => (\n            <Alert\n              onClose={() =>\n                setErreurs((erreurs) => erreurs.filter((_, i) => i !== index))\n              }\n              key={index}\n              sx={{ margin: \"6px\", fontWeight: \"bold\" }}\n              severity=\"error\"\n            >\n              {erreur}\n            </Alert>\n          ))}\n        <Header />\n        <Container\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n          }}\n        >\n          <FormControlLabel\n            value=\"top\"\n            sx={{\n              color: backgroundColor,\n              textTransform: \"uppercase\",\n              display: \"flex\",\n              padding: \"10px\",\n              margin: \"10px\",\n            }}\n            control={\n              <Switch checked={isGrouped} onChange={() => setGrouped()} />\n            }\n            label=\"Regrouper les transactions\"\n            labelPlacement=\"start\"\n          />\n          {erreurs.length > 0 && (\n            <Stack>\n              {hideErrors && (\n                <Alert variant=\"filled\" severity=\"warning\">\n                  Il y a {erreurs.length} documents en erreur dans l'export\n                </Alert>\n              )}\n              <FormControlLabel\n                value=\"top\"\n                sx={{\n                  color: backgroundColor,\n                  textTransform: \"uppercase\",\n                  display: \"flex\",\n                  padding: \"10px\",\n                  margin: \"10px\",\n                }}\n                control={\n                  <Switch\n                    checked={hideErrors}\n                    onChange={() => setHideErrors(!hideErrors)}\n                  />\n                }\n                label=\"Masquer les erreurs\"\n                labelPlacement=\"start\"\n              />\n            </Stack>\n          )}\n        </Container>\n        <form onSubmit={handleGenerateXML}>\n          <TransactionsSelector\n            transactions={transactions}\n            isTransactionToBeExported={isTransactionToBeExported}\n            handleChangeDebitor={handleChangeDebitor}\n            selectTransaction={selectTransaction}\n            DEBITORS_ACCOUNT={ACCOUNT_DEBITORS}\n            selectAllTransactions={selectAllTransactions}\n            isAllTransactionsSelected={isAllTransactionsSelected}\n            isGrouped={isGrouped}\n            transactionTotals={transactionTotals}\n            isTransactionInvalid={isTransactionInvalid}\n            debitor={debitor}\n            getTransactionsToExportTotal={getTransactionsToExportTotal}\n            getTransactionsDatesByCrediteur={getTransactionsDatesByCrediteur}\n          />\n          <Container\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n              paddingTop: \"40px\",\n            }}\n          >\n            <LoadingButton\n              disabled={transactionsToExport.length === 0 || loading}\n              sx={{\n                background: actionColor,\n                color: textColorLight,\n                textTransform: \"uppercase\",\n                fontWeight: \"bold\",\n              }}\n              variant=\"contained\"\n              type=\"submit\"\n              loading={loading}\n            >\n              {!loading ? \"Générer l'export SEPA\" : \"XML en cours de création\"}\n            </LoadingButton>\n          </Container>\n        </form>\n      </Container>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}