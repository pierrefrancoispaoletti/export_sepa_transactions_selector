{"ast":null,"code":"var _jsxFileName = \"/Users/pierrefrancoispaoletti/Desktop/EXPORT_SEPA/transactions-selector/src/components/App/App.js\",\n  _window$comptesDebite,\n  _window$documents,\n  _ref,\n  _window$messagesErreu,\n  _s = $RefreshSig$();\nimport { Alert, Container, FormControlLabel, Switch } from \"@mui/material\";\nimport Header from \"../Header/Header\";\nimport { accountDebitors, documents, messagesErreur } from \"../../dummy-data/test-data\";\nimport TransactionsSelector from \"../TransactionsSelector/TransactionsSelector\";\nimport { useEffect, useState } from \"react\";\nimport axios, { all } from \"axios\";\nimport URL_GENERATION from \"../../_config\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport colors from \"../../colors\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ACCOUNT_DEBITORS = (_window$comptesDebite = window.comptesDebiteurs) !== null && _window$comptesDebite !== void 0 ? _window$comptesDebite : accountDebitors;\nconst DOCUMENTS = (_window$documents = window.documents) !== null && _window$documents !== void 0 ? _window$documents : documents;\nconst MESSAGES_ERREURS = (_ref = (_window$messagesErreu = window.messagesErreurs) !== null && _window$messagesErreu !== void 0 ? _window$messagesErreu : messagesErreur) !== null && _ref !== void 0 ? _ref : [];\nconst {\n  textColorLight,\n  backgroundColor,\n  actionColor\n} = colors;\nconst App = () => {\n  _s();\n  const [transactions, setTransactions] = useState([...DOCUMENTS]);\n  const [transactionsToExport, setTransactionsToExport] = useState([]);\n  const [isGrouped, setIsGrouped] = useState(localStorage.getItem(\"isGrouped\") === \"true\");\n  const [loading, setLoading] = useState(false);\n  const [transactionTotals, setTransactionTotals] = useState({});\n  const [debitor, setDebitor] = useState([]);\n  const [erreurs, setErreurs] = useState(MESSAGES_ERREURS);\n  useEffect(() => {\n    let prefs = localStorage.getItem(\"debitors\");\n    console.log(prefs);\n    const favouriteDebitor = ACCOUNT_DEBITORS.find(debitor => debitor.favourite === \"1\");\n    if (favouriteDebitor) {\n      let allCrediteurs = new Set(transactions.map(transaction => transaction.nomCrediteur));\n      allCrediteurs = Array.from(allCrediteurs);\n      const newAllCrediteurs = allCrediteurs.map(crediteur => ({\n        [crediteur]: favouriteDebitor.id\n      }));\n      const infos = Object.entries(newAllCrediteurs);\n      console.log(Object.entries(JSON.parse(prefs)));\n      let newInfos = infos.map(_ref2 => {\n        let [nomCrediteur, debitor_id] = _ref2;\n        return {\n          debitor_id,\n          nomCrediteur\n        };\n      });\n      setDebitor(newInfos);\n      setTransactions(transactions => transactions.map(transaction => ({\n        ...transaction,\n        debitor_id: favouriteDebitor.id\n      })));\n      setTransactionsToExport(transactionsToExport => transactionsToExport.map(transaction => ({\n        ...transaction,\n        debitor_id: favouriteDebitor.id\n      })));\n    }\n\n    // if (prefs) {\n    //   const infos = Object.entries(JSON.parse(prefs));\n\n    //   let newInfos = infos.map(([nomCrediteur, debitor_id]) => ({\n    //     debitor_id,\n    //     nomCrediteur,\n    //   }));\n\n    //   setDebitor(newInfos);\n\n    //   newInfos.map(({ debitor_id, nomCrediteur }) => {\n    //     setTransactions((transactions) =>\n    //       transactions.map((transaction) =>\n    //         transaction.nomCrediteur === nomCrediteur\n    //           ? { ...transaction, debitor_id }\n    //           : transaction\n    //       )\n    //     );\n    //     setTransactionsToExport((transactionsToExport) =>\n    //       transactionsToExport.map((transaction) =>\n    //         transaction.nomCrediteur === nomCrediteur\n    //           ? { ...transaction, debitor_id }\n    //           : transaction\n    //       )\n    //     );\n    //   });\n    // }\n  }, []);\n  useEffect(() => {\n    setTransactionTotals(isTransactionOK(transactions));\n  }, [transactions]);\n  useEffect(() => {\n    // Vérifier si des transactions non valides sont sélectionnées\n    const invalidTransactions = transactionsToExport.filter(_ref3 => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref3;\n      return isTransactionInvalid(nomCrediteur, ttc);\n    });\n    if (invalidTransactions.length > 0) {\n      // Filtrer les transactions non valides et mettre à jour transactionsToExport\n      const validTransactions = transactionsToExport.filter(_ref4 => {\n        let {\n          nomCrediteur,\n          ttc\n        } = _ref4;\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    }\n  }, [isGrouped, transactions]);\n  const getTransactionsToExportTotal = () => {\n    return transactionsToExport.reduce((acc, _ref5) => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref5;\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n  };\n  useEffect(() => {\n    localStorage.setItem(\"isGrouped\", isGrouped);\n  }, [isGrouped]);\n  const isTransactionOK = transactions => {\n    const totalTransactionsByNomCrediteur = transactions.reduce((acc, _ref6) => {\n      let {\n        nomCrediteur,\n        ttc\n      } = _ref6;\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n    return totalTransactionsByNomCrediteur;\n  };\n  const isTransactionInvalid = (nomCrediteur, ttc) => {\n    return isGrouped && transactionTotals[nomCrediteur] < 0 || !isGrouped && Number(ttc) < 0;\n  };\n  const isTransactionToBeExported = Res_id => {\n    return transactionsToExport.some(transaction => transaction.Res_Id === Res_id);\n  };\n  const isAllTransactionsSelected = () => {\n    return transactionsToExport.length === transactions.length;\n  };\n  const selectTransaction = Res_Id => e => {\n    const {\n      checked\n    } = e.target;\n    if (checked) {\n      setTransactionsToExport(transactionsToExport => [...transactionsToExport, transactions.find(transaction => transaction.Res_Id === Res_Id)]);\n    } else {\n      setTransactionsToExport(transactionsToExport => transactionsToExport.filter(transaction => transaction.Res_Id !== Res_Id));\n    }\n  };\n  const selectAllTransactions = e => {\n    const {\n      checked\n    } = e.target;\n    if (checked) {\n      const validTransactions = transactions.filter(_ref7 => {\n        let {\n          nomCrediteur,\n          ttc\n        } = _ref7;\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    } else {\n      setTransactionsToExport([]);\n    }\n  };\n  const setGrouped = () => {\n    setIsGrouped(!isGrouped);\n  };\n  const handleChangeDebitor = (transactions, nomCrediteur) => e => {\n    const {\n      value\n    } = e.target;\n    setDebitor(debitor => {\n      const updatedDebitor = debitor.map(deb => deb.nomCrediteur === nomCrediteur ? {\n        ...deb,\n        debitor_id: value\n      } : deb);\n      const existingDebitor = updatedDebitor.find(deb => deb.nomCrediteur === nomCrediteur);\n      return existingDebitor ? updatedDebitor : [...updatedDebitor, {\n        nomCrediteur,\n        debitor_id: value\n      }];\n    });\n    setTransactions(transactions => transactions.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n      ...transaction,\n      debitor_id: value\n    } : transaction));\n    setTransactionsToExport(transactionsToExport => transactionsToExport.map(transaction => transaction.nomCrediteur === nomCrediteur ? {\n      ...transaction,\n      debitor_id: value\n    } : transaction));\n    const storedDebitors = localStorage.getItem(\"debitors\");\n    const debitorData = storedDebitors ? JSON.parse(storedDebitors) : {};\n    debitorData[nomCrediteur] = value;\n    localStorage.setItem(\"debitors\", JSON.stringify(debitorData));\n  };\n  const handleGenerateXML = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"transactions\", JSON.stringify(transactionsToExport));\n    formData.append(\"isGrouped\", isGrouped);\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_GENERATION,\n        data: formData,\n        responseType: \"blob\"\n      });\n      if (response.data.status && response.data.status === \"error\") {\n        alert(response.data.message);\n      } else {\n        let blob = null;\n        if (response.headers[\"content-type\"] === \"application/xml\") {\n          blob = new Blob([response.data], {\n            type: \"application/xml\"\n          });\n        } else {\n          blob = new Blob([response.data], {\n            type: \"application/zip\"\n          });\n        }\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        const contentDisposition = response.headers[\"content-disposition\"];\n        if (contentDisposition.length > 0) {\n          const filename = contentDisposition === null || contentDisposition === void 0 ? void 0 : contentDisposition.split(\"filename=\")[1];\n          link.href = url;\n          link.setAttribute(\"download\", filename);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      }\n    } catch (error) {\n      alert(\"Il y à eu une erreur lors de la soumission du formulaire, veuillez réessayer dans quelques instants\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [erreurs.length > 0 && erreurs.map((erreur, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setErreurs(erreurs => erreurs.filter((_, i) => i !== index)),\n        sx: {\n          margin: \"6px\"\n        },\n        severity: \"error\",\n        children: erreur\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        sx: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"top\",\n          sx: {\n            color: backgroundColor,\n            textTransform: \"uppercase\",\n            display: \"flex\",\n            padding: \"10px\",\n            margin: \"10px\"\n          },\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: isGrouped,\n            onChange: () => setGrouped()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this),\n          label: \"Regrouper les transactions\",\n          labelPlacement: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleGenerateXML,\n        children: [/*#__PURE__*/_jsxDEV(TransactionsSelector, {\n          transactions: transactions,\n          isTransactionToBeExported: isTransactionToBeExported,\n          handleChangeDebitor: handleChangeDebitor,\n          selectTransaction: selectTransaction,\n          DEBITORS_ACCOUNT: ACCOUNT_DEBITORS,\n          selectAllTransactions: selectAllTransactions,\n          isAllTransactionsSelected: isAllTransactionsSelected,\n          isGrouped: isGrouped,\n          transactionTotals: transactionTotals,\n          isTransactionInvalid: isTransactionInvalid,\n          debitor: debitor,\n          getTransactionsToExportTotal: getTransactionsToExportTotal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n            paddingTop: \"40px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n            disabled: transactionsToExport.length === 0 || loading,\n            sx: {\n              background: actionColor,\n              color: textColorLight,\n              textTransform: \"uppercase\",\n              fontWeight: \"bold\"\n            },\n            variant: \"contained\",\n            type: \"submit\",\n            loading: loading,\n            children: !loading ? \"Générer l'export SEPA\" : \"XML en cours de création\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MRz8SoYpeeGqhPQK5e+5Xenp6KQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alert","Container","FormControlLabel","Switch","Header","accountDebitors","documents","messagesErreur","TransactionsSelector","useEffect","useState","axios","all","URL_GENERATION","LoadingButton","colors","jsxDEV","_jsxDEV","ACCOUNT_DEBITORS","_window$comptesDebite","window","comptesDebiteurs","DOCUMENTS","_window$documents","MESSAGES_ERREURS","_ref","_window$messagesErreu","messagesErreurs","textColorLight","backgroundColor","actionColor","App","_s","transactions","setTransactions","transactionsToExport","setTransactionsToExport","isGrouped","setIsGrouped","localStorage","getItem","loading","setLoading","transactionTotals","setTransactionTotals","debitor","setDebitor","erreurs","setErreurs","prefs","console","log","favouriteDebitor","find","favourite","allCrediteurs","Set","map","transaction","nomCrediteur","Array","from","newAllCrediteurs","crediteur","id","infos","Object","entries","JSON","parse","newInfos","_ref2","debitor_id","isTransactionOK","invalidTransactions","filter","_ref3","ttc","isTransactionInvalid","length","validTransactions","_ref4","getTransactionsToExportTotal","reduce","acc","_ref5","Number","setItem","totalTransactionsByNomCrediteur","_ref6","isTransactionToBeExported","Res_id","some","Res_Id","isAllTransactionsSelected","selectTransaction","e","checked","target","selectAllTransactions","_ref7","setGrouped","handleChangeDebitor","value","updatedDebitor","deb","existingDebitor","storedDebitors","debitorData","stringify","handleGenerateXML","preventDefault","formData","FormData","append","response","method","url","data","responseType","status","alert","message","blob","headers","Blob","type","URL","createObjectURL","link","document","createElement","contentDisposition","filename","split","href","setAttribute","body","appendChild","click","removeChild","error","className","children","erreur","index","onClose","_","i","sx","margin","severity","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","width","color","textTransform","padding","control","onChange","label","labelPlacement","onSubmit","DEBITORS_ACCOUNT","alignItems","flexDirection","paddingTop","disabled","background","fontWeight","variant","_c","$RefreshReg$"],"sources":["/Users/pierrefrancoispaoletti/Desktop/EXPORT_SEPA/transactions-selector/src/components/App/App.js"],"sourcesContent":["import { Alert, Container, FormControlLabel, Switch } from \"@mui/material\";\nimport Header from \"../Header/Header\";\nimport {\n  accountDebitors,\n  documents,\n  messagesErreur,\n} from \"../../dummy-data/test-data\";\nimport TransactionsSelector from \"../TransactionsSelector/TransactionsSelector\";\nimport { useEffect, useState } from \"react\";\nimport axios, { all } from \"axios\";\nimport URL_GENERATION from \"../../_config\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport colors from \"../../colors\";\nimport \"./App.css\";\n\nconst ACCOUNT_DEBITORS = window.comptesDebiteurs ?? accountDebitors;\nconst DOCUMENTS = window.documents ?? documents;\nconst MESSAGES_ERREURS = window.messagesErreurs ?? messagesErreur ?? [];\n\nconst { textColorLight, backgroundColor, actionColor } = colors;\n\nconst App = () => {\n  const [transactions, setTransactions] = useState([...DOCUMENTS]);\n  const [transactionsToExport, setTransactionsToExport] = useState([]);\n  const [isGrouped, setIsGrouped] = useState(\n    localStorage.getItem(\"isGrouped\") === \"true\"\n  );\n  const [loading, setLoading] = useState(false);\n  const [transactionTotals, setTransactionTotals] = useState({});\n  const [debitor, setDebitor] = useState([]);\n\n  const [erreurs, setErreurs] = useState(MESSAGES_ERREURS);\n\n  useEffect(() => {\n    let prefs = localStorage.getItem(\"debitors\");\n\n    console.log(prefs);\n\n    const favouriteDebitor = ACCOUNT_DEBITORS.find(\n      (debitor) => debitor.favourite === \"1\"\n    );\n\n    if (favouriteDebitor) {\n      let allCrediteurs = new Set(\n        transactions.map((transaction) => transaction.nomCrediteur)\n      );\n      allCrediteurs = Array.from(allCrediteurs);\n\n      const newAllCrediteurs = allCrediteurs.map((crediteur) => ({\n        [crediteur]: favouriteDebitor.id,\n      }));\n\n      const infos = Object.entries(newAllCrediteurs);\n\n      console.log(Object.entries(JSON.parse(prefs)));\n\n      let newInfos = infos.map(([nomCrediteur, debitor_id]) => ({\n        debitor_id,\n        nomCrediteur,\n      }));\n\n      setDebitor(newInfos);\n\n      setTransactions((transactions) =>\n        transactions.map((transaction) => ({\n          ...transaction,\n          debitor_id: favouriteDebitor.id,\n        }))\n      );\n      setTransactionsToExport((transactionsToExport) =>\n        transactionsToExport.map((transaction) => ({\n          ...transaction,\n          debitor_id: favouriteDebitor.id,\n        }))\n      );\n    }\n\n    // if (prefs) {\n    //   const infos = Object.entries(JSON.parse(prefs));\n\n    //   let newInfos = infos.map(([nomCrediteur, debitor_id]) => ({\n    //     debitor_id,\n    //     nomCrediteur,\n    //   }));\n\n    //   setDebitor(newInfos);\n\n    //   newInfos.map(({ debitor_id, nomCrediteur }) => {\n    //     setTransactions((transactions) =>\n    //       transactions.map((transaction) =>\n    //         transaction.nomCrediteur === nomCrediteur\n    //           ? { ...transaction, debitor_id }\n    //           : transaction\n    //       )\n    //     );\n    //     setTransactionsToExport((transactionsToExport) =>\n    //       transactionsToExport.map((transaction) =>\n    //         transaction.nomCrediteur === nomCrediteur\n    //           ? { ...transaction, debitor_id }\n    //           : transaction\n    //       )\n    //     );\n    //   });\n    // }\n  }, []);\n\n  useEffect(() => {\n    setTransactionTotals(isTransactionOK(transactions));\n  }, [transactions]);\n\n  useEffect(() => {\n    // Vérifier si des transactions non valides sont sélectionnées\n    const invalidTransactions = transactionsToExport.filter(\n      ({ nomCrediteur, ttc }) => {\n        return isTransactionInvalid(nomCrediteur, ttc);\n      }\n    );\n\n    if (invalidTransactions.length > 0) {\n      // Filtrer les transactions non valides et mettre à jour transactionsToExport\n      const validTransactions = transactionsToExport.filter(\n        ({ nomCrediteur, ttc }) => {\n          return isTransactionInvalid(nomCrediteur, ttc) === false;\n        }\n      );\n      setTransactionsToExport(validTransactions);\n    }\n  }, [isGrouped, transactions]);\n\n  const getTransactionsToExportTotal = () => {\n    return transactionsToExport.reduce((acc, { nomCrediteur, ttc }) => {\n      acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n      return acc;\n    }, {});\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"isGrouped\", isGrouped);\n  }, [isGrouped]);\n\n  const isTransactionOK = (transactions) => {\n    const totalTransactionsByNomCrediteur = transactions.reduce(\n      (acc, { nomCrediteur, ttc }) => {\n        acc[nomCrediteur] = (acc[nomCrediteur] || 0) + Number(ttc);\n        return acc;\n      },\n      {}\n    );\n    return totalTransactionsByNomCrediteur;\n  };\n\n  const isTransactionInvalid = (nomCrediteur, ttc) => {\n    return (\n      (isGrouped && transactionTotals[nomCrediteur] < 0) ||\n      (!isGrouped && Number(ttc) < 0)\n    );\n  };\n\n  const isTransactionToBeExported = (Res_id) => {\n    return transactionsToExport.some(\n      (transaction) => transaction.Res_Id === Res_id\n    );\n  };\n\n  const isAllTransactionsSelected = () => {\n    return transactionsToExport.length === transactions.length;\n  };\n\n  const selectTransaction = (Res_Id) => (e) => {\n    const { checked } = e.target;\n    if (checked) {\n      setTransactionsToExport((transactionsToExport) => [\n        ...transactionsToExport,\n        transactions.find((transaction) => transaction.Res_Id === Res_Id),\n      ]);\n    } else {\n      setTransactionsToExport((transactionsToExport) =>\n        transactionsToExport.filter(\n          (transaction) => transaction.Res_Id !== Res_Id\n        )\n      );\n    }\n  };\n\n  const selectAllTransactions = (e) => {\n    const { checked } = e.target;\n    if (checked) {\n      const validTransactions = transactions.filter(({ nomCrediteur, ttc }) => {\n        return isTransactionInvalid(nomCrediteur, ttc) === false;\n      });\n      setTransactionsToExport(validTransactions);\n    } else {\n      setTransactionsToExport([]);\n    }\n  };\n\n  const setGrouped = () => {\n    setIsGrouped(!isGrouped);\n  };\n\n  const handleChangeDebitor = (transactions, nomCrediteur) => (e) => {\n    const { value } = e.target;\n\n    setDebitor((debitor) => {\n      const updatedDebitor = debitor.map((deb) =>\n        deb.nomCrediteur === nomCrediteur ? { ...deb, debitor_id: value } : deb\n      );\n      const existingDebitor = updatedDebitor.find(\n        (deb) => deb.nomCrediteur === nomCrediteur\n      );\n\n      return existingDebitor\n        ? updatedDebitor\n        : [...updatedDebitor, { nomCrediteur, debitor_id: value }];\n    });\n\n    setTransactions((transactions) =>\n      transactions.map((transaction) =>\n        transaction.nomCrediteur === nomCrediteur\n          ? { ...transaction, debitor_id: value }\n          : transaction\n      )\n    );\n    setTransactionsToExport((transactionsToExport) =>\n      transactionsToExport.map((transaction) =>\n        transaction.nomCrediteur === nomCrediteur\n          ? { ...transaction, debitor_id: value }\n          : transaction\n      )\n    );\n\n    const storedDebitors = localStorage.getItem(\"debitors\");\n    const debitorData = storedDebitors ? JSON.parse(storedDebitors) : {};\n    debitorData[nomCrediteur] = value;\n    localStorage.setItem(\"debitors\", JSON.stringify(debitorData));\n  };\n\n  const handleGenerateXML = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"transactions\", JSON.stringify(transactionsToExport));\n    formData.append(\"isGrouped\", isGrouped);\n\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_GENERATION,\n        data: formData,\n        responseType: \"blob\",\n      });\n\n      if (response.data.status && response.data.status === \"error\") {\n        alert(response.data.message);\n      } else {\n        let blob = null;\n\n        if (response.headers[\"content-type\"] === \"application/xml\") {\n          blob = new Blob([response.data], {\n            type: \"application/xml\",\n          });\n        } else {\n          blob = new Blob([response.data], {\n            type: \"application/zip\",\n          });\n        }\n\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        const contentDisposition = response.headers[\"content-disposition\"];\n        if (contentDisposition.length > 0) {\n          const filename = contentDisposition?.split(\"filename=\")[1];\n          link.href = url;\n          link.setAttribute(\"download\", filename);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      }\n    } catch (error) {\n      alert(\n        \"Il y à eu une erreur lors de la soumission du formulaire, veuillez réessayer dans quelques instants\"\n      );\n    }\n\n    setLoading(false);\n  };\n  return (\n    <div className=\"App\">\n      <Container>\n        {erreurs.length > 0 &&\n          erreurs.map((erreur, index) => (\n            <Alert\n              onClose={() =>\n                setErreurs((erreurs) => erreurs.filter((_, i) => i !== index))\n              }\n              key={index}\n              sx={{ margin: \"6px\" }}\n              severity=\"error\"\n            >\n              {erreur}\n            </Alert>\n          ))}\n        <Header />\n        <Container\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n          }}\n        >\n          <FormControlLabel\n            value=\"top\"\n            sx={{\n              color: backgroundColor,\n              textTransform: \"uppercase\",\n              display: \"flex\",\n              padding: \"10px\",\n              margin: \"10px\",\n            }}\n            control={\n              <Switch checked={isGrouped} onChange={() => setGrouped()} />\n            }\n            label=\"Regrouper les transactions\"\n            labelPlacement=\"start\"\n          />\n        </Container>\n        <form onSubmit={handleGenerateXML}>\n          <TransactionsSelector\n            transactions={transactions}\n            isTransactionToBeExported={isTransactionToBeExported}\n            handleChangeDebitor={handleChangeDebitor}\n            selectTransaction={selectTransaction}\n            DEBITORS_ACCOUNT={ACCOUNT_DEBITORS}\n            selectAllTransactions={selectAllTransactions}\n            isAllTransactionsSelected={isAllTransactionsSelected}\n            isGrouped={isGrouped}\n            transactionTotals={transactionTotals}\n            isTransactionInvalid={isTransactionInvalid}\n            debitor={debitor}\n            getTransactionsToExportTotal={getTransactionsToExportTotal}\n          />\n          <Container\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n              paddingTop: \"40px\",\n            }}\n          >\n            <LoadingButton\n              disabled={transactionsToExport.length === 0 || loading}\n              sx={{\n                background: actionColor,\n                color: textColorLight,\n                textTransform: \"uppercase\",\n                fontWeight: \"bold\",\n              }}\n              variant=\"contained\"\n              type=\"submit\"\n              loading={loading}\n            >\n              {!loading ? \"Générer l'export SEPA\" : \"XML en cours de création\"}\n            </LoadingButton>\n          </Container>\n        </form>\n      </Container>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":";;;;;;AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,eAAe;AAC1E,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SACEC,eAAe,EACfC,SAAS,EACTC,cAAc,QACT,4BAA4B;AACnC,OAAOC,oBAAoB,MAAM,8CAA8C;AAC/E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,IAAIC,GAAG,QAAQ,OAAO;AAClC,OAAOC,cAAc,MAAM,eAAe;AAC1C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,gBAAgB,IAAAC,qBAAA,GAAGC,MAAM,CAACC,gBAAgB,cAAAF,qBAAA,cAAAA,qBAAA,GAAId,eAAe;AACnE,MAAMiB,SAAS,IAAAC,iBAAA,GAAGH,MAAM,CAACd,SAAS,cAAAiB,iBAAA,cAAAA,iBAAA,GAAIjB,SAAS;AAC/C,MAAMkB,gBAAgB,IAAAC,IAAA,IAAAC,qBAAA,GAAGN,MAAM,CAACO,eAAe,cAAAD,qBAAA,cAAAA,qBAAA,GAAInB,cAAc,cAAAkB,IAAA,cAAAA,IAAA,GAAI,EAAE;AAEvE,MAAM;EAAEG,cAAc;EAAEC,eAAe;EAAEC;AAAY,CAAC,GAAGf,MAAM;AAE/D,MAAMgB,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,CAAC,GAAGY,SAAS,CAAC,CAAC;EAChE,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CACxC6B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,MACxC,CAAC;EACD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACmC,OAAO,EAAEC,UAAU,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM,CAACqC,OAAO,EAAEC,UAAU,CAAC,GAAGtC,QAAQ,CAACc,gBAAgB,CAAC;EAExDf,SAAS,CAAC,MAAM;IACd,IAAIwC,KAAK,GAAGV,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAE5CU,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAElB,MAAMG,gBAAgB,GAAGlC,gBAAgB,CAACmC,IAAI,CAC3CR,OAAO,IAAKA,OAAO,CAACS,SAAS,KAAK,GACrC,CAAC;IAED,IAAIF,gBAAgB,EAAE;MACpB,IAAIG,aAAa,GAAG,IAAIC,GAAG,CACzBvB,YAAY,CAACwB,GAAG,CAAEC,WAAW,IAAKA,WAAW,CAACC,YAAY,CAC5D,CAAC;MACDJ,aAAa,GAAGK,KAAK,CAACC,IAAI,CAACN,aAAa,CAAC;MAEzC,MAAMO,gBAAgB,GAAGP,aAAa,CAACE,GAAG,CAAEM,SAAS,KAAM;QACzD,CAACA,SAAS,GAAGX,gBAAgB,CAACY;MAChC,CAAC,CAAC,CAAC;MAEH,MAAMC,KAAK,GAAGC,MAAM,CAACC,OAAO,CAACL,gBAAgB,CAAC;MAE9CZ,OAAO,CAACC,GAAG,CAACe,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACpB,KAAK,CAAC,CAAC,CAAC;MAE9C,IAAIqB,QAAQ,GAAGL,KAAK,CAACR,GAAG,CAACc,KAAA;QAAA,IAAC,CAACZ,YAAY,EAAEa,UAAU,CAAC,GAAAD,KAAA;QAAA,OAAM;UACxDC,UAAU;UACVb;QACF,CAAC;MAAA,CAAC,CAAC;MAEHb,UAAU,CAACwB,QAAQ,CAAC;MAEpBpC,eAAe,CAAED,YAAY,IAC3BA,YAAY,CAACwB,GAAG,CAAEC,WAAW,KAAM;QACjC,GAAGA,WAAW;QACdc,UAAU,EAAEpB,gBAAgB,CAACY;MAC/B,CAAC,CAAC,CACJ,CAAC;MACD5B,uBAAuB,CAAED,oBAAoB,IAC3CA,oBAAoB,CAACsB,GAAG,CAAEC,WAAW,KAAM;QACzC,GAAGA,WAAW;QACdc,UAAU,EAAEpB,gBAAgB,CAACY;MAC/B,CAAC,CAAC,CACJ,CAAC;IACH;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAENvD,SAAS,CAAC,MAAM;IACdmC,oBAAoB,CAAC6B,eAAe,CAACxC,YAAY,CAAC,CAAC;EACrD,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBxB,SAAS,CAAC,MAAM;IACd;IACA,MAAMiE,mBAAmB,GAAGvC,oBAAoB,CAACwC,MAAM,CACrDC,KAAA,IAA2B;MAAA,IAA1B;QAAEjB,YAAY;QAAEkB;MAAI,CAAC,GAAAD,KAAA;MACpB,OAAOE,oBAAoB,CAACnB,YAAY,EAAEkB,GAAG,CAAC;IAChD,CACF,CAAC;IAED,IAAIH,mBAAmB,CAACK,MAAM,GAAG,CAAC,EAAE;MAClC;MACA,MAAMC,iBAAiB,GAAG7C,oBAAoB,CAACwC,MAAM,CACnDM,KAAA,IAA2B;QAAA,IAA1B;UAAEtB,YAAY;UAAEkB;QAAI,CAAC,GAAAI,KAAA;QACpB,OAAOH,oBAAoB,CAACnB,YAAY,EAAEkB,GAAG,CAAC,KAAK,KAAK;MAC1D,CACF,CAAC;MACDzC,uBAAuB,CAAC4C,iBAAiB,CAAC;IAC5C;EACF,CAAC,EAAE,CAAC3C,SAAS,EAAEJ,YAAY,CAAC,CAAC;EAE7B,MAAMiD,4BAA4B,GAAGA,CAAA,KAAM;IACzC,OAAO/C,oBAAoB,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAAC,KAAA,KAA4B;MAAA,IAA1B;QAAE1B,YAAY;QAAEkB;MAAI,CAAC,GAAAQ,KAAA;MAC5DD,GAAG,CAACzB,YAAY,CAAC,GAAG,CAACyB,GAAG,CAACzB,YAAY,CAAC,IAAI,CAAC,IAAI2B,MAAM,CAACT,GAAG,CAAC;MAC1D,OAAOO,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EAED3E,SAAS,CAAC,MAAM;IACd8B,YAAY,CAACgD,OAAO,CAAC,WAAW,EAAElD,SAAS,CAAC;EAC9C,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMoC,eAAe,GAAIxC,YAAY,IAAK;IACxC,MAAMuD,+BAA+B,GAAGvD,YAAY,CAACkD,MAAM,CACzD,CAACC,GAAG,EAAAK,KAAA,KAA4B;MAAA,IAA1B;QAAE9B,YAAY;QAAEkB;MAAI,CAAC,GAAAY,KAAA;MACzBL,GAAG,CAACzB,YAAY,CAAC,GAAG,CAACyB,GAAG,CAACzB,YAAY,CAAC,IAAI,CAAC,IAAI2B,MAAM,CAACT,GAAG,CAAC;MAC1D,OAAOO,GAAG;IACZ,CAAC,EACD,CAAC,CACH,CAAC;IACD,OAAOI,+BAA+B;EACxC,CAAC;EAED,MAAMV,oBAAoB,GAAGA,CAACnB,YAAY,EAAEkB,GAAG,KAAK;IAClD,OACGxC,SAAS,IAAIM,iBAAiB,CAACgB,YAAY,CAAC,GAAG,CAAC,IAChD,CAACtB,SAAS,IAAIiD,MAAM,CAACT,GAAG,CAAC,GAAG,CAAE;EAEnC,CAAC;EAED,MAAMa,yBAAyB,GAAIC,MAAM,IAAK;IAC5C,OAAOxD,oBAAoB,CAACyD,IAAI,CAC7BlC,WAAW,IAAKA,WAAW,CAACmC,MAAM,KAAKF,MAC1C,CAAC;EACH,CAAC;EAED,MAAMG,yBAAyB,GAAGA,CAAA,KAAM;IACtC,OAAO3D,oBAAoB,CAAC4C,MAAM,KAAK9C,YAAY,CAAC8C,MAAM;EAC5D,CAAC;EAED,MAAMgB,iBAAiB,GAAIF,MAAM,IAAMG,CAAC,IAAK;IAC3C,MAAM;MAAEC;IAAQ,CAAC,GAAGD,CAAC,CAACE,MAAM;IAC5B,IAAID,OAAO,EAAE;MACX7D,uBAAuB,CAAED,oBAAoB,IAAK,CAChD,GAAGA,oBAAoB,EACvBF,YAAY,CAACoB,IAAI,CAAEK,WAAW,IAAKA,WAAW,CAACmC,MAAM,KAAKA,MAAM,CAAC,CAClE,CAAC;IACJ,CAAC,MAAM;MACLzD,uBAAuB,CAAED,oBAAoB,IAC3CA,oBAAoB,CAACwC,MAAM,CACxBjB,WAAW,IAAKA,WAAW,CAACmC,MAAM,KAAKA,MAC1C,CACF,CAAC;IACH;EACF,CAAC;EAED,MAAMM,qBAAqB,GAAIH,CAAC,IAAK;IACnC,MAAM;MAAEC;IAAQ,CAAC,GAAGD,CAAC,CAACE,MAAM;IAC5B,IAAID,OAAO,EAAE;MACX,MAAMjB,iBAAiB,GAAG/C,YAAY,CAAC0C,MAAM,CAACyB,KAAA,IAA2B;QAAA,IAA1B;UAAEzC,YAAY;UAAEkB;QAAI,CAAC,GAAAuB,KAAA;QAClE,OAAOtB,oBAAoB,CAACnB,YAAY,EAAEkB,GAAG,CAAC,KAAK,KAAK;MAC1D,CAAC,CAAC;MACFzC,uBAAuB,CAAC4C,iBAAiB,CAAC;IAC5C,CAAC,MAAM;MACL5C,uBAAuB,CAAC,EAAE,CAAC;IAC7B;EACF,CAAC;EAED,MAAMiE,UAAU,GAAGA,CAAA,KAAM;IACvB/D,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,MAAMiE,mBAAmB,GAAGA,CAACrE,YAAY,EAAE0B,YAAY,KAAMqC,CAAC,IAAK;IACjE,MAAM;MAAEO;IAAM,CAAC,GAAGP,CAAC,CAACE,MAAM;IAE1BpD,UAAU,CAAED,OAAO,IAAK;MACtB,MAAM2D,cAAc,GAAG3D,OAAO,CAACY,GAAG,CAAEgD,GAAG,IACrCA,GAAG,CAAC9C,YAAY,KAAKA,YAAY,GAAG;QAAE,GAAG8C,GAAG;QAAEjC,UAAU,EAAE+B;MAAM,CAAC,GAAGE,GACtE,CAAC;MACD,MAAMC,eAAe,GAAGF,cAAc,CAACnD,IAAI,CACxCoD,GAAG,IAAKA,GAAG,CAAC9C,YAAY,KAAKA,YAChC,CAAC;MAED,OAAO+C,eAAe,GAClBF,cAAc,GACd,CAAC,GAAGA,cAAc,EAAE;QAAE7C,YAAY;QAAEa,UAAU,EAAE+B;MAAM,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEFrE,eAAe,CAAED,YAAY,IAC3BA,YAAY,CAACwB,GAAG,CAAEC,WAAW,IAC3BA,WAAW,CAACC,YAAY,KAAKA,YAAY,GACrC;MAAE,GAAGD,WAAW;MAAEc,UAAU,EAAE+B;IAAM,CAAC,GACrC7C,WACN,CACF,CAAC;IACDtB,uBAAuB,CAAED,oBAAoB,IAC3CA,oBAAoB,CAACsB,GAAG,CAAEC,WAAW,IACnCA,WAAW,CAACC,YAAY,KAAKA,YAAY,GACrC;MAAE,GAAGD,WAAW;MAAEc,UAAU,EAAE+B;IAAM,CAAC,GACrC7C,WACN,CACF,CAAC;IAED,MAAMiD,cAAc,GAAGpE,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAMoE,WAAW,GAAGD,cAAc,GAAGvC,IAAI,CAACC,KAAK,CAACsC,cAAc,CAAC,GAAG,CAAC,CAAC;IACpEC,WAAW,CAACjD,YAAY,CAAC,GAAG4C,KAAK;IACjChE,YAAY,CAACgD,OAAO,CAAC,UAAU,EAAEnB,IAAI,CAACyC,SAAS,CAACD,WAAW,CAAC,CAAC;EAC/D,CAAC;EAED,MAAME,iBAAiB,GAAG,MAAOd,CAAC,IAAK;IACrCA,CAAC,CAACe,cAAc,CAAC,CAAC;IAElBrE,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMsE,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAE9C,IAAI,CAACyC,SAAS,CAAC1E,oBAAoB,CAAC,CAAC;IACrE6E,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAE7E,SAAS,CAAC;IAEvC,IAAI;MACF,MAAM8E,QAAQ,GAAG,MAAMxG,KAAK,CAAC;QAC3ByG,MAAM,EAAE,MAAM;QACdC,GAAG,EAAExG,cAAc;QACnByG,IAAI,EAAEN,QAAQ;QACdO,YAAY,EAAE;MAChB,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACG,IAAI,CAACE,MAAM,IAAIL,QAAQ,CAACG,IAAI,CAACE,MAAM,KAAK,OAAO,EAAE;QAC5DC,KAAK,CAACN,QAAQ,CAACG,IAAI,CAACI,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL,IAAIC,IAAI,GAAG,IAAI;QAEf,IAAIR,QAAQ,CAACS,OAAO,CAAC,cAAc,CAAC,KAAK,iBAAiB,EAAE;UAC1DD,IAAI,GAAG,IAAIE,IAAI,CAAC,CAACV,QAAQ,CAACG,IAAI,CAAC,EAAE;YAC/BQ,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,MAAM;UACLH,IAAI,GAAG,IAAIE,IAAI,CAAC,CAACV,QAAQ,CAACG,IAAI,CAAC,EAAE;YAC/BQ,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;QAEA,MAAMT,GAAG,GAAGjG,MAAM,CAAC2G,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;QAC5C,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACxC,MAAMC,kBAAkB,GAAGjB,QAAQ,CAACS,OAAO,CAAC,qBAAqB,CAAC;QAClE,IAAIQ,kBAAkB,CAACrD,MAAM,GAAG,CAAC,EAAE;UACjC,MAAMsD,QAAQ,GAAGD,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;UAC1DL,IAAI,CAACM,IAAI,GAAGlB,GAAG;UACfY,IAAI,CAACO,YAAY,CAAC,UAAU,EAAEH,QAAQ,CAAC;UACvCH,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;UAC/BA,IAAI,CAACU,KAAK,CAAC,CAAC;UACZT,QAAQ,CAACO,IAAI,CAACG,WAAW,CAACX,IAAI,CAAC;QACjC;MACF;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdpB,KAAK,CACH,qGACF,CAAC;IACH;IAEA/E,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EACD,oBACEzB,OAAA;IAAK6H,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB9H,OAAA,CAAChB,SAAS;MAAA8I,QAAA,GACPhG,OAAO,CAACgC,MAAM,GAAG,CAAC,IACjBhC,OAAO,CAACU,GAAG,CAAC,CAACuF,MAAM,EAAEC,KAAK,kBACxBhI,OAAA,CAACjB,KAAK;QACJkJ,OAAO,EAAEA,CAAA,KACPlG,UAAU,CAAED,OAAO,IAAKA,OAAO,CAAC4B,MAAM,CAAC,CAACwE,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK,CAAC,CAC9D;QAEDI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAM,CAAE;QACtBC,QAAQ,EAAC,OAAO;QAAAR,QAAA,EAEfC;MAAM,GAJFC,KAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKL,CACR,CAAC,eACJ1I,OAAA,CAACb,MAAM;QAAAoJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV1I,OAAA,CAAChB,SAAS;QACRoJ,EAAE,EAAE;UACFO,OAAO,EAAE,MAAM;UACfC,cAAc,EAAE,eAAe;UAC/BC,KAAK,EAAE;QACT,CAAE;QAAAf,QAAA,eAEF9H,OAAA,CAACf,gBAAgB;UACfqG,KAAK,EAAC,KAAK;UACX8C,EAAE,EAAE;YACFU,KAAK,EAAElI,eAAe;YACtBmI,aAAa,EAAE,WAAW;YAC1BJ,OAAO,EAAE,MAAM;YACfK,OAAO,EAAE,MAAM;YACfX,MAAM,EAAE;UACV,CAAE;UACFY,OAAO,eACLjJ,OAAA,CAACd,MAAM;YAAC8F,OAAO,EAAE5D,SAAU;YAAC8H,QAAQ,EAAEA,CAAA,KAAM9D,UAAU,CAAC;UAAE;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAC5D;UACDS,KAAK,EAAC,4BAA4B;UAClCC,cAAc,EAAC;QAAO;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO,CAAC,eACZ1I,OAAA;QAAMqJ,QAAQ,EAAExD,iBAAkB;QAAAiC,QAAA,gBAChC9H,OAAA,CAACT,oBAAoB;UACnByB,YAAY,EAAEA,YAAa;UAC3ByD,yBAAyB,EAAEA,yBAA0B;UACrDY,mBAAmB,EAAEA,mBAAoB;UACzCP,iBAAiB,EAAEA,iBAAkB;UACrCwE,gBAAgB,EAAErJ,gBAAiB;UACnCiF,qBAAqB,EAAEA,qBAAsB;UAC7CL,yBAAyB,EAAEA,yBAA0B;UACrDzD,SAAS,EAAEA,SAAU;UACrBM,iBAAiB,EAAEA,iBAAkB;UACrCmC,oBAAoB,EAAEA,oBAAqB;UAC3CjC,OAAO,EAAEA,OAAQ;UACjBqC,4BAA4B,EAAEA;QAA6B;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC,eACF1I,OAAA,CAAChB,SAAS;UACRoJ,EAAE,EAAE;YACFO,OAAO,EAAE,MAAM;YACfY,UAAU,EAAE,QAAQ;YACpBC,aAAa,EAAE,QAAQ;YACvBC,UAAU,EAAE;UACd,CAAE;UAAA3B,QAAA,eAEF9H,OAAA,CAACH,aAAa;YACZ6J,QAAQ,EAAExI,oBAAoB,CAAC4C,MAAM,KAAK,CAAC,IAAItC,OAAQ;YACvD4G,EAAE,EAAE;cACFuB,UAAU,EAAE9I,WAAW;cACvBiI,KAAK,EAAEnI,cAAc;cACrBoI,aAAa,EAAE,WAAW;cAC1Ba,UAAU,EAAE;YACd,CAAE;YACFC,OAAO,EAAC,WAAW;YACnBhD,IAAI,EAAC,QAAQ;YACbrF,OAAO,EAAEA,OAAQ;YAAAsG,QAAA,EAEhB,CAACtG,OAAO,GAAG,uBAAuB,GAAG;UAA0B;YAAA+G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAAC3H,EAAA,CA7VID,GAAG;AAAAgJ,EAAA,GAAHhJ,GAAG;AA8VT,eAAeA,GAAG;AAAC,IAAAgJ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}